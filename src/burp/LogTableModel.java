package burp;

import java.util.ArrayList;
import java.util.List;
import javax.swing.table.AbstractTableModel;

/**
 * Log table object
 */
public class LogTableModel extends AbstractTableModel {

    /**
	 * 
	 */
	private static final long serialVersionUID = 8185642309341464476L;
	private final java.util.List<Log> logArray = new ArrayList<>();

    @Override
    public int getRowCount() {

        return logArray.size();
    }

    @Override
    public int getColumnCount() {

        return 6;
    }

    @Override
    public String getColumnName(int columnIndex) {

        switch (columnIndex) {
            case 0:
                return "Timestamp";
            case 1:
                return "Tool";
            case 2:
                return "Vulnerability name";
            case 3:
                return "Vulnerability characteristics";
            case 4:
                return "Vulnerability URL";
            case 5:
                return "HTTP Status";
            default:
                return "";
        }
    }

    @Override
    public Class<?> getColumnClass(int columnIndex) {

        switch (columnIndex) {
            case 0:
                return String.class;
            case 1:
                return String.class;
            case 2:
                return String.class;
            case 3:
                return String.class;
            case 4:
                return String.class;
            case 5:
                return Short.class;
            default:
                return Object.class;
        }
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {

        Log logEntry = logArray.get(rowIndex);

        switch (columnIndex) {
            case 0:
                return logEntry.timestamp;
            case 1:
                return logEntry.tool;
            case 2:
                return logEntry.vname;
            case 3:
                return logEntry.vcname;
            case 4:
                return logEntry.url.toString();
            case 5:
                return logEntry.status;
            default:
                return "";
        }
    }

    /**
     * Returns the <code>Log</code>
     *
     * @return <code>List<Log></code>
     */
    List<Log> getLogArray() {

        return logArray;
    }

}

