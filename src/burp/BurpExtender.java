
package burp;

import java.io.PrintWriter;
import java.net.URL;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;


@SuppressWarnings("unused")
public class BurpExtender implements IBurpExtender, IHttpListener{

    static IBurpExtenderCallbacks callbacks;
    private IExtensionHelpers helpers;
    private MainPanel panel;
    private HashMap<URL, Long> reqResMap = new HashMap<>();
    private boolean isRunning = false;
    private int toolFilter = 0;
    public VulnerabilityMatching vdata = new VulnerabilityMatching(); 
    private ArrayList<String> ScrapUrlData = new ArrayList<String>();

    public static void main(String args[]) {
    	
    }


    @Override
    public void registerExtenderCallbacks(final IBurpExtenderCallbacks callbacks) {
        BurpExtender.callbacks = callbacks;
        helpers = callbacks.getHelpers();
        callbacks.setExtensionName("Vulnerability Matching");
        panel = new MainPanel(this);
        callbacks.addSuiteTab(panel);
        callbacks.registerHttpListener(this);
    }

    void setRunning(boolean running) {

        this.isRunning = running;
    }

    void setToolFilter(int toolFilter) {

        this.toolFilter = toolFilter;
    }

    @Override
    public void processHttpMessage(int toolFlag, boolean messageIsRequest, IHttpRequestResponse messageInfo) {
    	isVulnerabilityJudge(toolFlag, messageIsRequest, messageInfo);
    }

    public void isVulnerabilityJudge(int toolFlag, boolean messageIsRequest, IHttpRequestResponse messageInfo) {
    	if(isRunning) { 
    		if (toolFilter == 0 || toolFilter == toolFlag) {
    			if (messageIsRequest) { 
    			
    			}else {
    				URL url = helpers.analyzeRequest(messageInfo).getUrl(); 
    				if(!this.ScrapUrlData.contains(String.valueOf(url))) {
    					ArrayList<?> url111 = vdata.vulnerabilityMatchingUrl(url.getHost()+url.getPath()); 
    					String[] curl = this.getRequestCookie(messageInfo);
    					if(!url111.isEmpty()) {
    						if(!vdata.isVulnerabilityFeatures(url.toString(), (String)url111.get(0))) {
    							String vname = (String) url111.get(0);
    							String vcname = (String) url111.get(1);
    							this.setLog(panel, messageInfo, toolFlag, vname, vcname);
    							vdata.addVulnerabilityFeatures(url.toString(), vname);
    						}else if(panel.isClickClear()){
    							this.vdata.vulnerabilityFeaturesDict.clear();
    						}
    					}else if(curl.length == 2) {
    						String curlv = curl[1];
    						ArrayList<?> url222 = vdata.vulnerabilityMatchingCookie(curlv);
    						if(!url222.isEmpty()) {
    							if(!vdata.isVulnerabilityFeatures(url.toString(), (String)url222.get(0))) {
    								String vname = (String) url222.get(0);
    								String vcname = (String) url222.get(1);
    								this.setLog(panel, messageInfo, toolFlag, vname, vcname);
    								vdata.addVulnerabilityFeatures(url.toString(), vname);
    							}else if(panel.isClickClear()) {
    								this.vdata.vulnerabilityFeaturesDict.clear();
    							}
    						}
    					}else {
    						this.ScrapUrlData.add(String.valueOf(url));
    						if(panel.isClickClear()) {
    							// 若UI界面上清空了显示的数据，则缓存表的数据中也都清空下
    							this.vdata.vulnerabilityFeaturesDict.clear();
    							this.ScrapUrlData.clear();
    						}
    					}
    				}else if(panel.isClickClear()) {
						this.vdata.vulnerabilityFeaturesDict.clear();
						this.ScrapUrlData.clear();
    				}
    			}
    			
    		}
    	}
    	
    }
    
    private String[] getRequestCookie(IHttpRequestResponse messageInfo) {
			List<String> l = helpers.analyzeRequest(messageInfo.getRequest()).getHeaders();
			String url5 = String.valueOf(helpers.analyzeRequest(messageInfo).getUrl()); 
			for (String s : l) {
				int n = helpers.indexOf(s.getBytes(), "Cookie:".getBytes(), false, 0, s.length());
				if(n>=0){
					String strCookie = s.substring(8);
					return new String[]{url5,strCookie};
			}
		}
			return new String[]{url5,""};
    }
    
    private void setLog(MainPanel panel,IHttpRequestResponse messageInfo,int toolFlag,String vname,String vcname) {
        synchronized (panel.getLogTableModel().getLogArray()) {
            int row = panel.getLogTableModel().getLogArray().size();
            if (panel.getURLFilterText().isEmpty() && !panel.isScopeSelected()) {
                addLog(messageInfo, toolFlag,vname ,vcname, row);
            }
            // Log filter URL requests
            else if (!panel.isScopeSelected() && !panel.getURLFilterText().isEmpty() &&
                    helpers.analyzeRequest(messageInfo).getUrl().toExternalForm().contains(panel.getURLFilterText())) {
                addLog(messageInfo, toolFlag, vname ,vcname, row);
            }
            // Log in-scope requests
            else if (panel.isScopeSelected() && panel.getURLFilterText().isEmpty() &&
                    callbacks.isInScope(helpers.analyzeRequest(messageInfo).getUrl())) {
                addLog(messageInfo, toolFlag, vname ,vcname, row);
            }
            // Log in-scope requests and filter
            else if (panel.isScopeSelected() && !panel.getURLFilterText().isEmpty() &&
                    callbacks.isInScope(helpers.analyzeRequest(messageInfo).getUrl()) &&
                    helpers.analyzeRequest(messageInfo).getUrl().toExternalForm().contains(panel.getURLFilterText())) {
                addLog(messageInfo, toolFlag, vname ,vcname, row);
            	}
        	}
    }
    
    private void addLog(IHttpRequestResponse messageInfo, int toolFlag, String vname,String vcname, int row) {

    		panel.getLogTableModel().getLogArray().add(new Log(LocalDateTime.now(),
                                                           	callbacks.getToolName(toolFlag),
                                                           	callbacks.saveBuffersToTempFiles(messageInfo),
                                                           	helpers.analyzeRequest(messageInfo).getUrl(),
                                                           	helpers.analyzeResponse(messageInfo.getResponse()).getStatusCode(),
                                                           	vcname,
                                                           	vname));
        panel.getLogTableModel().fireTableRowsInserted(row, row);
    }

    HashMap<URL, Long> getReqResMap() {

        return reqResMap;
    }
}

